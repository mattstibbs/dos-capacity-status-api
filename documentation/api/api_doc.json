{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
        "/home/": {
            "get": {
                "responses": {
                    "401": {
                        "description": "Unauthorized - when a user is unauthorised to use this API.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "operationId": "get_home",
                "tags": [
                    "/home"
                ]
            }
        },
        "/status/update/": {
            "parameters": [
                {
                    "name": "payload",
                    "required": true,
                    "in": "body",
                    "schema": {
                        "$ref": "#/definitions/ServiceUpdate"
                    }
                }
            ],
            "post": {
                "responses": {
                    "500": {
                        "description": "Internal Server Error - when an unexpected error is encountered whilst processing the request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - when the server times out waiting for a request to be processed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - when the requested service to update could not be found in DoS.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - when a user is not authorised to update the status of the requested service.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - when a user is unauthorised to use this API.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - upon receiving a corupt request or a request which fails API validation rules.",
                        "schema": {
                            "$ref": "#/definitions/ValidationErrorResponse"
                        }
                    },
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SuccessResponse"
                        }
                    }
                },
                "description": "This endpoint will update the capacity (RAG) status of a single service in DoS as specified in the request body JSON payload. The format of the JSON payload is described further down in this document. </BR></BR> <B><U>Business Logic</B></U></BR></BR> Upon processing a successful request, the API will return the success response (see below for the format of the success response) and will update DoS with the following information: </BR> <ul><li><B>RAG status</B> - this is the capacity status of the service, and will be updated to the service status defined in the request payload. The API will allow an authenticated and authorised user to update the status of a service to Red, Amber, or Green.</li>  <li><B>Reset time</B> - this is the time when the service will go back into a Green state having been set to either Amber or Red by the request. The reset time will be set to the date and time when the service status is updated (or maintained) plus the amount of time in minutes as defined by the reset time value in the request payload. If this value is 0 or not provided, the reset time will default to 4 hours from the time the service status is updated. A state change to Red or Amber for a service will persist for a maximum period of 24 hours per request before automatically being reset back to Green. This means that if a service needs to be Red or Amber for over 24 hours, multiple requests through this API for that service will be required. </li> <li><B>Notes</B> - a free text field providing the opportunity for any additional ad-hoc notes to be added regarding the state change. Notes defined in the request payload will be appended to the text: RAG status set by the Capacity Service API -. </li> <li><B>Last updated date/time</B> - this is a timestamp of when the service was last updated and will be set to the date and time that the service was updated. </li> <li><B>By</B> - this is a record of who last updated the service, and will be updated to the user identifier for the user that posted the request to the API.</li></ul></BR> Requests that fail the request validation rules will not be processed and will return the validation error response (see below for the validation rules and the format of the validation error response). </BR></BR> Requests that fail to be processed due to an error or failure will return an error response (see below for the format of the error response) </BR> </BR> <B><U>Request Validation</B></U></BR></BR> Values specified in the request payload will be validated by the API. The following business validation rules are in place: </BR><ul><li> <B>VAL-0001</B> - ServiceIdentifier must be provided - returned when no ServiceIdentifer has been specified in the request payload. </li><li><B> VAL-0002</B> - ServiceState must be provided - returned when no ServiceState has been specified in the request payload. </li> <li><B>VAL-0003</B> - Invalid ServiceState value - returned when a service state other than that defined by the Service Update Model is specified. </li> <li><B>VAL-0004</B> - Invalid ResetTime value - returned when a reset time other than that defined by the Service Update Model is specified. </li> <li><B>VAL-0005</B> - ResetTime outside of limits - returned when the reset time specified is outside of the minimum or maximum limits defined by the Service Update Model. </li> <li><B>VAL-0006</B> - Notes outside of limits - returned when the notes specified are outside of the maximum limit defined by the Service Update Model. </li></ul> </BR> <B><U>Response Formats</B></U></BR> </BR> Please refer to the models section of this document for the response formats.",
                "operationId": "post_status_update",
                "tags": [
                    "status/update"
                ]
            }
        }
    },
    "info": {
        "title": "Capacity Status API",
        "version": "0.0.1",
        "description": "The Capacity Status API is an API to enable UEC service providers and DoS Leads to change the RAG status (also known as the Capacity Status) of their services in DoS."
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "tags": [
        {
            "name": "/home",
            "description": "The home page of the Capacity Status API."
        },
        {
            "name": "status/update",
            "description": "The Capacity Status API update service"
        }
    ],
    "definitions": {
        "ErrorResponse": {
            "required": [
                "errorCode",
                "errorMessage"
            ],
            "properties": {
                "errorCode": {
                    "type": "string",
                    "description": "A specific error code identifying the actual error that occurred."
                },
                "errorMessage": {
                    "type": "string",
                    "description": "A human readable message for the error."
                }
            },
            "type": "object"
        },
        "SuccessResponse": {
            "required": [
                "successCode",
                "successMessage"
            ],
            "properties": {
                "successCode": {
                    "type": "string",
                    "description": "The standard HTTP code for the successful processing of a request."
                },
                "successMessage": {
                    "type": "string",
                    "description": "A more detailed message of the successful request."
                }
            },
            "type": "object"
        },
        "ServiceUpdate": {
            "required": [
                "serviceId",
                "serviceState"
            ],
            "properties": {
                "serviceId": {
                    "type": "string",
                    "description": "The DoS Service UID of the service to update its capacity (RAG) status."
                },
                "serviceState": {
                    "type": "string",
                    "description": "The RAG state to set the service to.",
                    "example": "Red",
                    "enum": [
                        "Red",
                        "RED",
                        "red",
                        "Amber",
                        "AMBER",
                        "amber",
                        "Green",
                        "GREEN",
                        "green"
                    ]
                },
                "resetTime": {
                    "type": "integer",
                    "description": "The amount of time, specified in 1 minute blocks up to and including 24 hours (1440 minutes), from the time the service status is updated by the request to reset the RAG status of the service back to GREEN. If no value or 0 is provided, the reset time will default to 4 hours (240 minutes).",
                    "default": 240,
                    "minimum": 0,
                    "maximum": 1440
                },
                "notes": {
                    "type": "string",
                    "description": "Optional field of up to 900 characters to add ad-hoc notes to this status update action. Any notes provided will be appended to the end of the default notes set by the API, e.g. RAG status set by the Capacity Service API - additional notes here.",
                    "default": "RAG status set by Capacity Service API"
                }
            },
            "type": "object"
        },
        "ValidationErrorResponse": {
            "required": [
                "validationCode",
                "validationMessage"
            ],
            "properties": {
                "validationCode": {
                    "type": "string",
                    "description": "A specific validation code identifying the actual validation error that occurred."
                },
                "validationMessage": {
                    "type": "string",
                    "description": "A human readable message for why the validation of the request failed."
                }
            },
            "type": "object"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
